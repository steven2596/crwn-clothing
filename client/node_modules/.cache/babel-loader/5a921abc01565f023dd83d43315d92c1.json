{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { UserActionTypes } from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure } from './user.actions';\nexport function* getSnapshotFromUser(user) {\n  const userRef = yield call(createUserProfileDocument, user);\n  const snapshot = yield userRef.get();\n  yield put(signInSuccess({\n    id: snapshot.id,\n    ...snapshot.data()\n  }));\n}\n;\nexport function* signUpAsync({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user, {\n      displayName\n    });\n    const snapshot = yield userRef.get();\n    alert('Account Sign Up Successful');\n    yield put(signInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n;\nexport function* googleSignInAsync() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUser(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* userSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n;\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpAsync);\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}\n; //redux-saga flow for Sign in With Email\n// 1. User filled email, password and clicked Sign In Button which will cause handleSubmit(form submit).\n// 2. emailSignInStart(email, password) is invoked.\n// 3. emailSignInStart in user.action.js is called. \n// 4. onEmailSignInStart() is listening for UserActionTypes.EMAIL_SIGN_IN_START and it receives the action.\n// 5. emailSignInAsync() is invoked.\n// As a result, the user will be set as currentUser in user redux state.\n//redux-saga flow for Sign in with Google is the same except it doesn't require email and password.","map":{"version":3,"sources":["D:/Bootcamp/NodeJS/react-course/crown-clothing/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","getSnapshotFromUser","user","userRef","snapshot","get","id","data","signUpAsync","payload","displayName","email","password","createUserWithEmailAndPassword","alert","error","googleSignInAsync","signInWithPopup","emailSignInAsync","signInWithEmailAndPassword","isUserAuthenticated","userAuth","userSignOut","signOut","onSignUpStart","SIGN_UP_START","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nimport { UserActionTypes } from './user.types';\r\n\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure } from './user.actions';\r\n\r\nexport function* getSnapshotFromUser(user) {\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    const snapshot = yield userRef.get();\r\n\r\n    yield put(signInSuccess({ id: snapshot.id, ...snapshot.data() }));\r\n};\r\n\r\nexport function* signUpAsync({ payload: { displayName, email, password } }) {\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n        const userRef = yield call(createUserProfileDocument, user, { displayName });\r\n        const snapshot = yield userRef.get();\r\n        alert('Account Sign Up Successful');\r\n        yield put(signInSuccess({ id: snapshot.id, ...snapshot.data() }));\r\n    } catch (error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n};\r\n\r\nexport function* googleSignInAsync() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n\r\n        yield call(getSnapshotFromUser, user)\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* emailSignInAsync({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n\r\n        yield call(getSnapshotFromUser, user);\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUser(userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* userSignOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    } catch (error) {\r\n        yield put(signOutFailure(error))\r\n    }\r\n};\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START,\r\n        signUpAsync\r\n    )\r\n};\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        googleSignInAsync\r\n    )\r\n};\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,\r\n        emailSignInAsync\r\n    )\r\n};\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,\r\n        isUserAuthenticated\r\n    );\r\n};\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,\r\n        userSignOut\r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart)\r\n    ])\r\n};\r\n\r\n//redux-saga flow for Sign in With Email\r\n// 1. User filled email, password and clicked Sign In Button which will cause handleSubmit(form submit).\r\n// 2. emailSignInStart(email, password) is invoked.\r\n// 3. emailSignInStart in user.action.js is called. \r\n// 4. onEmailSignInStart() is listening for UserActionTypes.EMAIL_SIGN_IN_START and it receives the action.\r\n// 5. emailSignInAsync() is invoked.\r\n// As a result, the user will be set as currentUser in user redux state.\r\n\r\n//redux-saga flow for Sign in with Google is the same except it doesn't require email and password."]},"metadata":{},"sourceType":"module"}