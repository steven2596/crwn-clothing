{"ast":null,"code":"import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\nexport const selectShop = state => state.shop;\nexport const selectShopCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionForPreview = createSelector([selectShopCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : []);\nexport const selectShopIsFetching = createSelector([selectShop], shop => shop.isFetching);\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectShopCollections], collections => collections ? collections[collectionUrlParam] : null)); //Example: if url is '/shop/jackets',\n// collectionUrlParam = jackets, which mean COLLECTION_ID_MAP[collectionUrlParam] = 3\n// so collections.find() will return jackets collection","map":{"version":3,"sources":["D:/Bootcamp/NodeJS/react-course/crown-clothing/crwn-clothing/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectShopCollections","collections","selectCollectionForPreview","Object","keys","map","key","selectShopIsFetching","isFetching","selectCollection","collectionUrlParam"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;AAEP,OAAO,MAAMC,qBAAqB,GAAGL,cAAc,CAC/C,CAACE,UAAD,CAD+C,EAE/CE,IAAI,IAAIA,IAAI,CAACE,WAFkC,CAA5C;AAKP,OAAO,MAAMC,0BAA0B,GAAGP,cAAc,CACpD,CAACK,qBAAD,CADoD,EAEpDC,WAAW,IAAIA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,GAAG,IAAIL,WAAW,CAACK,GAAD,CAA/C,CAAH,GAA2D,EAFjC,CAAjD;AAKP,OAAO,MAAMC,oBAAoB,GAAGZ,cAAc,CAC9C,CAACE,UAAD,CAD8C,EAE9CE,IAAI,IAAIA,IAAI,CAACS,UAFiC,CAA3C;AAMP,OAAO,MAAMC,gBAAgB,GAAGb,OAAO,CAAEc,kBAAD,IACpCf,cAAc,CACV,CAACK,qBAAD,CADU,EAEVC,WAAW,IAAIA,WAAW,GAAGA,WAAW,CAACS,kBAAD,CAAd,GAAqC,IAFrD,CADqB,CAAhC,C,CAMP;AACA;AACA","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nimport memoize from 'lodash.memoize';\r\n\r\nexport const selectShop = state => state.shop;\r\n\r\nexport const selectShopCollections = createSelector(\r\n    [selectShop],\r\n    shop => shop.collections\r\n);\r\n\r\nexport const selectCollectionForPreview = createSelector(\r\n    [selectShopCollections],\r\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\r\n);\r\n\r\nexport const selectShopIsFetching = createSelector(\r\n    [selectShop],\r\n    shop => shop.isFetching\r\n);\r\n\r\n\r\nexport const selectCollection = memoize((collectionUrlParam) =>\r\n    createSelector(\r\n        [selectShopCollections],\r\n        collections => collections ? collections[collectionUrlParam] : null\r\n    ));\r\n\r\n//Example: if url is '/shop/jackets',\r\n// collectionUrlParam = jackets, which mean COLLECTION_ID_MAP[collectionUrlParam] = 3\r\n// so collections.find() will return jackets collection\r\n\r\n"]},"metadata":{},"sourceType":"module"}