{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { UserActionTypes } from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nexport function* getSnapshotFromUser(user) {\n  const userRef = yield call(createUserProfileDocument, user);\n  const snapshot = yield userRef.get();\n  yield put(signInSuccess({\n    id: snapshot.id,\n    ...snapshot.data()\n  }));\n}\n;\nexport function* googleSignInAsync() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUser(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* userSignOut() {\n  try {\n    yield auth.signOut;\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}\n; //redux-saga flow for Sign in With Email\n// 1. User filled email, password and clicked Sign In Button which will cause handleSubmit(form submit).\n// 2. emailSignInStart(email, password) is invoked.\n// 3. emailSignInStart in user.action.js is called. \n// 4. onEmailSignInStart() is listening for UserActionTypes.EMAIL_SIGN_IN_START and it receives the action.\n// 5. emailSignInAsync() is invoked.\n// As a result, the user will be set as currentUser in user redux state.\n//redux-saga flow for Sign in with Google is the same except it doesn't require email and password.","map":{"version":3,"sources":["D:/Bootcamp/NodeJS/react-course/crown-clothing/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","getSnapshotFromUser","user","userRef","snapshot","get","id","data","googleSignInAsync","signInWithPopup","error","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","userAuth","userSignOut","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nimport { UserActionTypes } from './user.types';\r\n\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\r\n\r\nexport function* getSnapshotFromUser(user) {\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    const snapshot = yield userRef.get();\r\n\r\n    yield put(signInSuccess({ id: snapshot.id, ...snapshot.data() }));\r\n};\r\n\r\nexport function* googleSignInAsync() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n\r\n        yield call(getSnapshotFromUser, user)\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* emailSignInAsync({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n\r\n        yield call(getSnapshotFromUser, user);\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUser(userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* userSignOut() {\r\n    try {\r\n        yield auth.signOut;\r\n        yield put(signOutSuccess())\r\n    } catch (error) {\r\n        yield put(signOutFailure(error))\r\n    }\r\n};\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        googleSignInAsync\r\n    )\r\n};\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,\r\n        emailSignInAsync\r\n    )\r\n};\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,\r\n        isUserAuthenticated\r\n    );\r\n};\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,\r\n        userSignOut\r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart)\r\n    ])\r\n};\r\n\r\n//redux-saga flow for Sign in With Email\r\n// 1. User filled email, password and clicked Sign In Button which will cause handleSubmit(form submit).\r\n// 2. emailSignInStart(email, password) is invoked.\r\n// 3. emailSignInStart in user.action.js is called. \r\n// 4. onEmailSignInStart() is listening for UserActionTypes.EMAIL_SIGN_IN_START and it receives the action.\r\n// 5. emailSignInAsync() is invoked.\r\n// As a result, the user will be set as currentUser in user redux state.\r\n\r\n//redux-saga flow for Sign in with Google is the same except it doesn't require email and password."]},"metadata":{},"sourceType":"module"}