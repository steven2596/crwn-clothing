{"ast":null,"code":"import Shop from '../../pages/shop/shop.component';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //Purpose of fetchCollectionsStartAsync:\n// It returns a function which receives dispatch as parameter\n// 1. fetchCollectionsStart sets isFetching: true\n// 2. When collections data comes back from firebase, \n//    fetchCollectionsSuccess put those datas into shop.collections and sets isFetching: false\n// 3. If error occurs during fetching data, fetchCollectionsFailure() will be called.\n// export const fetchCollectionsStartAsync = () => {\n//     return dispatch => {\n//         const collectionRef = firestore.collection('collections');\n//         dispatch(fetchCollectionsStart());\n//         collectionRef.get()\n//             .then(snapshot => {\n//                 const collectionMap = convertCollectionSnapshotToMap(snapshot);\n//                 dispatch(fetchCollectionsSuccess(collectionMap));\n//             })\n//             .catch(error => {\n//                 dispatch(fetchCollectionsFailure(error.message));\n//             })\n//     }\n// };","map":{"version":3,"sources":["D:/Bootcamp/NodeJS/react-course/crown-clothing/crwn-clothing/client/src/redux/shop/shop.actions.js"],"names":["Shop","ShopActionTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iCAAjB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,+BAA1D;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,aAAD,KAAoB;AACvDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADiC;AAEvDC,EAAAA,OAAO,EAAEF;AAF8C,CAApB,CAAhC;AAKP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACtDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAnB,CAAhC,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Shop from '../../pages/shop/shop.component';\r\nimport ShopActionTypes from './shop.types';\r\n\r\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n})\r\n\r\nexport const fetchCollectionsSuccess = (collectionMap) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\n//Purpose of fetchCollectionsStartAsync:\r\n// It returns a function which receives dispatch as parameter\r\n// 1. fetchCollectionsStart sets isFetching: true\r\n// 2. When collections data comes back from firebase, \r\n//    fetchCollectionsSuccess put those datas into shop.collections and sets isFetching: false\r\n// 3. If error occurs during fetching data, fetchCollectionsFailure() will be called.\r\n// export const fetchCollectionsStartAsync = () => {\r\n//     return dispatch => {\r\n//         const collectionRef = firestore.collection('collections');\r\n//         dispatch(fetchCollectionsStart());\r\n\r\n//         collectionRef.get()\r\n//             .then(snapshot => {\r\n//                 const collectionMap = convertCollectionSnapshotToMap(snapshot);\r\n//                 dispatch(fetchCollectionsSuccess(collectionMap));\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch(fetchCollectionsFailure(error.message));\r\n//             })\r\n//     }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}