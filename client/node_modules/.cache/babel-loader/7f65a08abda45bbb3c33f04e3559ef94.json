{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, checkUserSession } from '../../firebase/firebase.utils';\nimport { UserActionTypes } from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nexport function* getSnapshotFromUser(user) {\n  const userRef = yield call(createUserProfileDocument, user);\n  const snapshot = yield userRef.get();\n  yield put(signInSuccess({\n    id: snapshot.id,\n    ...snapshot.data()\n  }));\n}\n;\nexport function* googleSignInAsync() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* emailSignInAsync({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* userSession() {\n  try {\n    const user = yield checkUserSession();\n    yield call(getSnapshotFromUser, user);\n  } catch (error) {\n    yield call(signInFailure(error));\n  }\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignInAsync);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignInAsync);\n}\n;\nexport function* onSetCurrentUser() {\n  yield takeLatest(UserActionTypes.SET_CURRENT_USER, userSession);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onSetCurrentUser)]);\n}\n; //redux-saga flow for Sign in With Email\n// 1. User filled email, password and clicked Sign In Button which will cause handleSubmit(form submit).\n// 2. emailSignInStart(email, password) is invoked.\n// 3. emailSignInStart in user.action.js is called. \n// 4. onEmailSignInStart() is listening for UserActionTypes.EMAIL_SIGN_IN_START and it receives the action.\n// 5. emailSignInAsync() is invoked.\n// As a result, the user will be set as currentUser in user redux state.\n//redux-saga flow for Sign in with Google is the same except it doesn't require email and password.","map":{"version":3,"sources":["D:/Bootcamp/NodeJS/react-course/crown-clothing/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","checkUserSession","UserActionTypes","signInSuccess","signInFailure","getSnapshotFromUser","user","userRef","snapshot","get","id","data","googleSignInAsync","signInWithPopup","error","emailSignInAsync","payload","email","password","signInWithEmailAndPassword","userSession","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSetCurrentUser","SET_CURRENT_USER","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,gBAA1D,QAAkF,+BAAlF;AAEA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,mBAAV,CAA8BC,IAA9B,EAAoC;AACvC,QAAMC,OAAO,GAAG,MAAMV,IAAI,CAACG,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,QAAME,QAAQ,GAAG,MAAMD,OAAO,CAACE,GAAR,EAAvB;AAEA,QAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,IAAAA,EAAE,EAAEF,QAAQ,CAACE,EAAf;AAAmB,OAAGF,QAAQ,CAACG,IAAT;AAAtB,GAAD,CAAd,CAAT;AACH;AAAA;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACjC,MAAI;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB;AAEA,UAAMF,IAAI,CAACQ,mBAAD,EAAsBC,IAAtB,CAAV;AAEH,GALD,CAKE,OAAOQ,KAAP,EAAc;AACZ,UAAMnB,GAAG,CAACS,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUC,gBAAV,CAA2B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA3B,EAA6D;AAChE,MAAI;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AAEA,UAAMrB,IAAI,CAACQ,mBAAD,EAAsBC,IAAtB,CAAV;AAEH,GALD,CAKE,OAAOQ,KAAP,EAAc;AACZ,UAAMnB,GAAG,CAACS,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUM,WAAV,GAAwB;AAC3B,MAAI;AACA,UAAMd,IAAI,GAAG,MAAML,gBAAgB,EAAnC;AACA,UAAMJ,IAAI,CAACQ,mBAAD,EAAsBC,IAAtB,CAAV;AACH,GAHD,CAGE,OAAOQ,KAAP,EAAc;AACZ,UAAMjB,IAAI,CAACO,aAAa,CAACU,KAAD,CAAd,CAAV;AACH;AACJ;AAAA;AAED,OAAO,UAAUO,mBAAV,GAAgC;AACnC,QAAM3B,UAAU,CAACQ,eAAe,CAACoB,oBAAjB,EACZV,iBADY,CAAhB;AAGH;AAAA;AAED,OAAO,UAAUW,kBAAV,GAA+B;AAClC,QAAM7B,UAAU,CAACQ,eAAe,CAACsB,mBAAjB,EACZT,gBADY,CAAhB;AAGH;AAAA;AAED,OAAO,UAAUU,gBAAV,GAA6B;AAChC,QAAM/B,UAAU,CAACQ,eAAe,CAACwB,gBAAjB,EACZN,WADY,CAAhB;AAGH;AAED,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAACwB,mBAAD,CAAL,EAA4BxB,IAAI,CAAC0B,kBAAD,CAAhC,EAAsD1B,IAAI,CAAC4B,gBAAD,CAA1D,CAAD,CAAT;AACH;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, checkUserSession } from '../../firebase/firebase.utils';\r\n\r\nimport { UserActionTypes } from './user.types';\r\n\r\nimport { signInSuccess, signInFailure } from './user.actions';\r\n\r\nexport function* getSnapshotFromUser(user) {\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    const snapshot = yield userRef.get();\r\n\r\n    yield put(signInSuccess({ id: snapshot.id, ...snapshot.data() }));\r\n};\r\n\r\nexport function* googleSignInAsync() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n\r\n        yield call(getSnapshotFromUser, user)\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* emailSignInAsync({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n\r\n        yield call(getSnapshotFromUser, user);\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* userSession() {\r\n    try {\r\n        const user = yield checkUserSession();\r\n        yield call(getSnapshotFromUser, user);\r\n    } catch (error) {\r\n        yield call(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        googleSignInAsync\r\n    )\r\n};\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,\r\n        emailSignInAsync\r\n    )\r\n};\r\n\r\nexport function* onSetCurrentUser() {\r\n    yield takeLatest(UserActionTypes.SET_CURRENT_USER,\r\n        userSession\r\n    )\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onSetCurrentUser)])\r\n};\r\n\r\n//redux-saga flow for Sign in With Email\r\n// 1. User filled email, password and clicked Sign In Button which will cause handleSubmit(form submit).\r\n// 2. emailSignInStart(email, password) is invoked.\r\n// 3. emailSignInStart in user.action.js is called. \r\n// 4. onEmailSignInStart() is listening for UserActionTypes.EMAIL_SIGN_IN_START and it receives the action.\r\n// 5. emailSignInAsync() is invoked.\r\n// As a result, the user will be set as currentUser in user redux state.\r\n\r\n//redux-saga flow for Sign in with Google is the same except it doesn't require email and password."]},"metadata":{},"sourceType":"module"}